
/**
 * Module dependencies.
 */
require("./utils/UpdatePrototypes");
var admin = require("firebase-admin");
var serviceAccount = require("../serviceAccountKey.json");
serviceAccount.private_key = process.env.FIRE_BASE_PRIVATE_KEY.replace(/\\n/g, '\n');
admin.initializeApp({credential: admin.credential.cert(serviceAccount), databaseURL: "https://mean-angular.firebaseio.com"});

let context = require("./context");
let eventHandler = new (require("./handlers/handler-routes"));

var app = require('../app');
var debug = require('debug')('mean-app:server');

var http = require('http');
var sio = require('socket.io');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
console.log(`Using port[${port}]`);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = sio(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

io.on('connection', function(socket){
  console.log('user connected');
  socket.on('message', async function (data) {
    let event = JSON.parse(data);
    eventHandler.onMessage(socket, event);
  });
  socket.on('disconnect', function(){
    eventHandler.onDisconnect();
  });
});
